syntax = "proto3";

package monitorproto;

import "github.com/brotherlogic/discovery/proto/discovery.proto";

message Empty {}

message MessageLog {
        // The entry writing the log
        discovery.RegistryEntry entry = 1;

        // The message to be written to the logs
        string message = 2;

        // The timestamp of the written log
        int64 timestamps = 3;
}

message ValueLog {
        discovery.RegistryEntry entry = 1;
        float value = 2;
}

message LogWriteResponse {
        // Whether the log was written
        bool success = 1;

        //The timestamp at which the log was written
        int64 timestamp = 2;
}

message MessageLogReadResponse {
  // The response from the logs
  repeated MessageLog logs = 1;
}

message Milestone {
  string name = 1;
  int32 time = 2;
}

message FunctionCall {
  string binary = 1;
  string name = 2;
  int32 time = 3;
  repeated Milestone milestones = 4;
}

message Stats {
  string binary = 1;
  string name = 2;
  int32 number_of_calls = 3;
  int32 mean_run_time = 4;
  repeated int32 run_times = 5;
  FunctionCall slowest = 6;
}

message StatsList {
  repeated Stats stats = 1;
}

service MonitorService {
        rpc WriteMessageLog(MessageLog) returns (LogWriteResponse) {}
        rpc WriteValueLog(ValueLog) returns (LogWriteResponse) {}

        rpc ReadMessageLogs (discovery.RegistryEntry) returns (MessageLogReadResponse) {}

        rpc WriteFunctionCall (FunctionCall) returns (Empty) {}
        rpc GetStats(FunctionCall) returns (StatsList) {}

        rpc ClearStats(Empty) returns (Empty) {}
}
